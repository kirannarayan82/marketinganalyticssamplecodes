{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generating a Random String including letters and digits\n",
      "First Random String is   FhBHIxTA\n"
     ]
    }
   ],
   "source": [
    "#Lets generate sample function to generate customer profile ids and transaction ids\n",
    "import random\n",
    "import string\n",
    "import pandas as pd\n",
    "from datetime import datetime\n",
    "import numpy as np\n",
    "def randomStringDigits(stringLength=6):\n",
    "    \"\"\"Generate a random string of letters and digits \"\"\"\n",
    "    lettersAndDigits = string.ascii_letters + string.digits\n",
    "    return ''.join(random.choice(lettersAndDigits).join(random.choice(lettersAndDigits)) for i in range(stringLength))\n",
    "print (\"Generating a Random String including letters and digits\")\n",
    "print (\"First Random String is  \", randomStringDigits(8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "# Lets generate some dummy data for customer demography namely geography,age,gender,\n",
    "geocode=['State1','State2','State3','State4']\n",
    "geog=pd.DataFrame([np.random.choice(geocode) for _ in range(50000)])\n",
    "age=pd.DataFrame(np.random.randint(20,48,size=279149))\n",
    "genderid=['Male','Female']\n",
    "gender=pd.DataFrame([np.random.choice(genderid) for _ in range(50000)])\n",
    "lettersAndDigits = string.ascii_letters + string.digits\n",
    "profileid=pd.DataFrame(randomStringDigits(5) for _ in range(50000))\n",
    "demodata=pd.concat([geog,age,gender,profileid],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>State1</td>\n",
       "      <td>39</td>\n",
       "      <td>Female</td>\n",
       "      <td>hbSHb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>State2</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>V5fLj</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>State1</td>\n",
       "      <td>32</td>\n",
       "      <td>Male</td>\n",
       "      <td>nvRcD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>State1</td>\n",
       "      <td>27</td>\n",
       "      <td>Male</td>\n",
       "      <td>6coA1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>State4</td>\n",
       "      <td>44</td>\n",
       "      <td>Female</td>\n",
       "      <td>ebcdr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>State4</td>\n",
       "      <td>25</td>\n",
       "      <td>Male</td>\n",
       "      <td>CeIwa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>State1</td>\n",
       "      <td>39</td>\n",
       "      <td>Female</td>\n",
       "      <td>VIxuG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>State1</td>\n",
       "      <td>35</td>\n",
       "      <td>Female</td>\n",
       "      <td>WpHDi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>State2</td>\n",
       "      <td>31</td>\n",
       "      <td>Female</td>\n",
       "      <td>UnTAU</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>State1</td>\n",
       "      <td>22</td>\n",
       "      <td>Female</td>\n",
       "      <td>DIQW8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>State2</td>\n",
       "      <td>47</td>\n",
       "      <td>Male</td>\n",
       "      <td>bsKc5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>State2</td>\n",
       "      <td>39</td>\n",
       "      <td>Female</td>\n",
       "      <td>GY1se</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>State4</td>\n",
       "      <td>45</td>\n",
       "      <td>Male</td>\n",
       "      <td>cFZOR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>State4</td>\n",
       "      <td>22</td>\n",
       "      <td>Male</td>\n",
       "      <td>Ksr2k</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>State4</td>\n",
       "      <td>32</td>\n",
       "      <td>Female</td>\n",
       "      <td>WinRG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>State2</td>\n",
       "      <td>43</td>\n",
       "      <td>Female</td>\n",
       "      <td>1AGHL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>State3</td>\n",
       "      <td>35</td>\n",
       "      <td>Male</td>\n",
       "      <td>G2UNk</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>State2</td>\n",
       "      <td>47</td>\n",
       "      <td>Male</td>\n",
       "      <td>7X9vM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>State1</td>\n",
       "      <td>32</td>\n",
       "      <td>Male</td>\n",
       "      <td>hJTKJ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>State1</td>\n",
       "      <td>47</td>\n",
       "      <td>Female</td>\n",
       "      <td>XSMgP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>State4</td>\n",
       "      <td>35</td>\n",
       "      <td>Male</td>\n",
       "      <td>KNbvo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>State2</td>\n",
       "      <td>47</td>\n",
       "      <td>Female</td>\n",
       "      <td>IQbcj</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>State4</td>\n",
       "      <td>33</td>\n",
       "      <td>Male</td>\n",
       "      <td>n9uJA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>State1</td>\n",
       "      <td>34</td>\n",
       "      <td>Male</td>\n",
       "      <td>blz0Z</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>State2</td>\n",
       "      <td>35</td>\n",
       "      <td>Male</td>\n",
       "      <td>47YPh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>State2</td>\n",
       "      <td>32</td>\n",
       "      <td>Male</td>\n",
       "      <td>Folg3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>State2</td>\n",
       "      <td>33</td>\n",
       "      <td>Male</td>\n",
       "      <td>rMC8W</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>State3</td>\n",
       "      <td>20</td>\n",
       "      <td>Male</td>\n",
       "      <td>bP62U</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>State1</td>\n",
       "      <td>21</td>\n",
       "      <td>Male</td>\n",
       "      <td>oHuOC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>State3</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "      <td>DK91T</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279119</th>\n",
       "      <td>NaN</td>\n",
       "      <td>38</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279120</th>\n",
       "      <td>NaN</td>\n",
       "      <td>40</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279121</th>\n",
       "      <td>NaN</td>\n",
       "      <td>44</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279122</th>\n",
       "      <td>NaN</td>\n",
       "      <td>38</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279123</th>\n",
       "      <td>NaN</td>\n",
       "      <td>33</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279124</th>\n",
       "      <td>NaN</td>\n",
       "      <td>44</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279125</th>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279126</th>\n",
       "      <td>NaN</td>\n",
       "      <td>41</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279127</th>\n",
       "      <td>NaN</td>\n",
       "      <td>46</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279128</th>\n",
       "      <td>NaN</td>\n",
       "      <td>43</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279129</th>\n",
       "      <td>NaN</td>\n",
       "      <td>45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279130</th>\n",
       "      <td>NaN</td>\n",
       "      <td>33</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279131</th>\n",
       "      <td>NaN</td>\n",
       "      <td>24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279132</th>\n",
       "      <td>NaN</td>\n",
       "      <td>24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279133</th>\n",
       "      <td>NaN</td>\n",
       "      <td>32</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279134</th>\n",
       "      <td>NaN</td>\n",
       "      <td>45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279135</th>\n",
       "      <td>NaN</td>\n",
       "      <td>39</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279136</th>\n",
       "      <td>NaN</td>\n",
       "      <td>42</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279137</th>\n",
       "      <td>NaN</td>\n",
       "      <td>24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279138</th>\n",
       "      <td>NaN</td>\n",
       "      <td>33</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279139</th>\n",
       "      <td>NaN</td>\n",
       "      <td>35</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279140</th>\n",
       "      <td>NaN</td>\n",
       "      <td>31</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279141</th>\n",
       "      <td>NaN</td>\n",
       "      <td>42</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279142</th>\n",
       "      <td>NaN</td>\n",
       "      <td>20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279143</th>\n",
       "      <td>NaN</td>\n",
       "      <td>45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279144</th>\n",
       "      <td>NaN</td>\n",
       "      <td>31</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279145</th>\n",
       "      <td>NaN</td>\n",
       "      <td>42</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279146</th>\n",
       "      <td>NaN</td>\n",
       "      <td>26</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279147</th>\n",
       "      <td>NaN</td>\n",
       "      <td>32</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>279148</th>\n",
       "      <td>NaN</td>\n",
       "      <td>39</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>279149 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             0   0       0      0\n",
       "0       State1  39  Female  hbSHb\n",
       "1       State2  44  Female  V5fLj\n",
       "2       State1  32    Male  nvRcD\n",
       "3       State1  27    Male  6coA1\n",
       "4       State4  44  Female  ebcdr\n",
       "5       State4  25    Male  CeIwa\n",
       "6       State1  39  Female  VIxuG\n",
       "7       State1  35  Female  WpHDi\n",
       "8       State2  31  Female  UnTAU\n",
       "9       State1  22  Female  DIQW8\n",
       "10      State2  47    Male  bsKc5\n",
       "11      State2  39  Female  GY1se\n",
       "12      State4  45    Male  cFZOR\n",
       "13      State4  22    Male  Ksr2k\n",
       "14      State4  32  Female  WinRG\n",
       "15      State2  43  Female  1AGHL\n",
       "16      State3  35    Male  G2UNk\n",
       "17      State2  47    Male  7X9vM\n",
       "18      State1  32    Male  hJTKJ\n",
       "19      State1  47  Female  XSMgP\n",
       "20      State4  35    Male  KNbvo\n",
       "21      State2  47  Female  IQbcj\n",
       "22      State4  33    Male  n9uJA\n",
       "23      State1  34    Male  blz0Z\n",
       "24      State2  35    Male  47YPh\n",
       "25      State2  32    Male  Folg3\n",
       "26      State2  33    Male  rMC8W\n",
       "27      State3  20    Male  bP62U\n",
       "28      State1  21    Male  oHuOC\n",
       "29      State3  34  Female  DK91T\n",
       "...        ...  ..     ...    ...\n",
       "279119     NaN  38     NaN    NaN\n",
       "279120     NaN  40     NaN    NaN\n",
       "279121     NaN  44     NaN    NaN\n",
       "279122     NaN  38     NaN    NaN\n",
       "279123     NaN  33     NaN    NaN\n",
       "279124     NaN  44     NaN    NaN\n",
       "279125     NaN  30     NaN    NaN\n",
       "279126     NaN  41     NaN    NaN\n",
       "279127     NaN  46     NaN    NaN\n",
       "279128     NaN  43     NaN    NaN\n",
       "279129     NaN  45     NaN    NaN\n",
       "279130     NaN  33     NaN    NaN\n",
       "279131     NaN  24     NaN    NaN\n",
       "279132     NaN  24     NaN    NaN\n",
       "279133     NaN  32     NaN    NaN\n",
       "279134     NaN  45     NaN    NaN\n",
       "279135     NaN  39     NaN    NaN\n",
       "279136     NaN  42     NaN    NaN\n",
       "279137     NaN  24     NaN    NaN\n",
       "279138     NaN  33     NaN    NaN\n",
       "279139     NaN  35     NaN    NaN\n",
       "279140     NaN  31     NaN    NaN\n",
       "279141     NaN  42     NaN    NaN\n",
       "279142     NaN  20     NaN    NaN\n",
       "279143     NaN  45     NaN    NaN\n",
       "279144     NaN  31     NaN    NaN\n",
       "279145     NaN  42     NaN    NaN\n",
       "279146     NaN  26     NaN    NaN\n",
       "279147     NaN  32     NaN    NaN\n",
       "279148     NaN  39     NaN    NaN\n",
       "\n",
       "[279149 rows x 4 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "demodata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Lets generate sample data fro  bookings\n",
    "airportcode=['ACI','ALJ','EDF','ESF','NYC','EWR','CKY','NJN']\n",
    "source=pd.DataFrame([np.random.choice(airportcode) for _ in range(50000)])\n",
    "destination=pd.DataFrame([np.random.choice(airportcode) for _ in range(50000)])\n",
    "bookingamount=pd.DataFrame(np.random.randint(200,500,size=50000))\n",
    "Invoiceamount=pd.DataFrame(np.random.randint(250,550,size=50000))\n",
    "import random\n",
    "import time\n",
    "from random import randrange\n",
    "import datetime \n",
    "start_timestamp1 = time.mktime(time.strptime('01/06/2017  12:33:00','%d/%m/%Y %H:%M:%S'))\n",
    "end_timestamp1 = time.mktime(time.strptime('01/03/2020 14:33:00','%d/%m/%Y %H:%M:%S'))\n",
    "bookingtime=pd.DataFrame([time.strftime(\"%d/%m/%y %H:%M:%S\",time.localtime(randrange(start_timestamp1,end_timestamp1))) for _ in range(50000)])\n",
    "#Generate sample transactionid\n",
    "transactionid=pd.DataFrame(randomStringDigits(8) for _ in range(50000))\n",
    "bookingdata=pd.concat([source,destination,bookingamount,Invoiceamount,bookingtime,profileid,transactionid],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NYC</td>\n",
       "      <td>CKY</td>\n",
       "      <td>482</td>\n",
       "      <td>327</td>\n",
       "      <td>13/01/18 00:47:28</td>\n",
       "      <td>hbSHb</td>\n",
       "      <td>K1HPRGTQ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CKY</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>328</td>\n",
       "      <td>425</td>\n",
       "      <td>25/03/19 15:28:39</td>\n",
       "      <td>V5fLj</td>\n",
       "      <td>S2bv2jlY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>EDF</td>\n",
       "      <td>ACI</td>\n",
       "      <td>313</td>\n",
       "      <td>284</td>\n",
       "      <td>11/09/19 04:49:13</td>\n",
       "      <td>nvRcD</td>\n",
       "      <td>YSJEayBZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ALJ</td>\n",
       "      <td>NYC</td>\n",
       "      <td>302</td>\n",
       "      <td>401</td>\n",
       "      <td>21/09/17 02:06:57</td>\n",
       "      <td>6coA1</td>\n",
       "      <td>3mlyI5Bf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NYC</td>\n",
       "      <td>NYC</td>\n",
       "      <td>404</td>\n",
       "      <td>438</td>\n",
       "      <td>30/10/18 12:49:07</td>\n",
       "      <td>ebcdr</td>\n",
       "      <td>FWj6gzGK</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NYC</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>217</td>\n",
       "      <td>477</td>\n",
       "      <td>20/03/18 00:45:23</td>\n",
       "      <td>CeIwa</td>\n",
       "      <td>RlNLiO0a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NYC</td>\n",
       "      <td>EDF</td>\n",
       "      <td>235</td>\n",
       "      <td>306</td>\n",
       "      <td>29/04/18 04:20:05</td>\n",
       "      <td>VIxuG</td>\n",
       "      <td>EpxoWHlm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>EDF</td>\n",
       "      <td>EWR</td>\n",
       "      <td>237</td>\n",
       "      <td>477</td>\n",
       "      <td>10/08/19 18:59:20</td>\n",
       "      <td>WpHDi</td>\n",
       "      <td>kFkNhxgf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>EWR</td>\n",
       "      <td>EWR</td>\n",
       "      <td>480</td>\n",
       "      <td>253</td>\n",
       "      <td>03/12/17 16:24:06</td>\n",
       "      <td>UnTAU</td>\n",
       "      <td>qNA9KmEf</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>NJN</td>\n",
       "      <td>NYC</td>\n",
       "      <td>281</td>\n",
       "      <td>357</td>\n",
       "      <td>06/11/18 12:44:23</td>\n",
       "      <td>DIQW8</td>\n",
       "      <td>CmPNCtRL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>NYC</td>\n",
       "      <td>NYC</td>\n",
       "      <td>265</td>\n",
       "      <td>461</td>\n",
       "      <td>02/06/18 20:05:55</td>\n",
       "      <td>bsKc5</td>\n",
       "      <td>nFV9lYjv</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>ALJ</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>247</td>\n",
       "      <td>347</td>\n",
       "      <td>29/01/18 18:51:08</td>\n",
       "      <td>GY1se</td>\n",
       "      <td>pQM9vUnZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>CKY</td>\n",
       "      <td>NYC</td>\n",
       "      <td>445</td>\n",
       "      <td>437</td>\n",
       "      <td>20/07/19 21:00:51</td>\n",
       "      <td>cFZOR</td>\n",
       "      <td>dEJcuPFc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>EDF</td>\n",
       "      <td>ESF</td>\n",
       "      <td>432</td>\n",
       "      <td>388</td>\n",
       "      <td>10/12/19 17:04:39</td>\n",
       "      <td>Ksr2k</td>\n",
       "      <td>9RxTAK4C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>ALJ</td>\n",
       "      <td>EDF</td>\n",
       "      <td>337</td>\n",
       "      <td>473</td>\n",
       "      <td>23/06/17 21:50:49</td>\n",
       "      <td>WinRG</td>\n",
       "      <td>kjEcW3aB</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>CKY</td>\n",
       "      <td>CKY</td>\n",
       "      <td>262</td>\n",
       "      <td>354</td>\n",
       "      <td>24/07/18 00:13:51</td>\n",
       "      <td>1AGHL</td>\n",
       "      <td>XACXvu93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>CKY</td>\n",
       "      <td>ESF</td>\n",
       "      <td>312</td>\n",
       "      <td>532</td>\n",
       "      <td>23/11/19 11:43:28</td>\n",
       "      <td>G2UNk</td>\n",
       "      <td>ewcpywWs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>ESF</td>\n",
       "      <td>EWR</td>\n",
       "      <td>301</td>\n",
       "      <td>385</td>\n",
       "      <td>09/11/19 00:48:28</td>\n",
       "      <td>7X9vM</td>\n",
       "      <td>kxgL2N4h</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>ALJ</td>\n",
       "      <td>NYC</td>\n",
       "      <td>244</td>\n",
       "      <td>381</td>\n",
       "      <td>22/08/19 21:50:14</td>\n",
       "      <td>hJTKJ</td>\n",
       "      <td>AV3fegNF</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>ESF</td>\n",
       "      <td>CKY</td>\n",
       "      <td>337</td>\n",
       "      <td>418</td>\n",
       "      <td>06/02/20 02:15:47</td>\n",
       "      <td>XSMgP</td>\n",
       "      <td>rv6KoAQP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>ALJ</td>\n",
       "      <td>NJN</td>\n",
       "      <td>330</td>\n",
       "      <td>357</td>\n",
       "      <td>09/02/20 15:28:28</td>\n",
       "      <td>KNbvo</td>\n",
       "      <td>iXDQjvc1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>EWR</td>\n",
       "      <td>EWR</td>\n",
       "      <td>338</td>\n",
       "      <td>290</td>\n",
       "      <td>16/09/17 01:17:15</td>\n",
       "      <td>IQbcj</td>\n",
       "      <td>2ac9sXtj</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>EDF</td>\n",
       "      <td>ACI</td>\n",
       "      <td>459</td>\n",
       "      <td>303</td>\n",
       "      <td>15/07/19 15:38:05</td>\n",
       "      <td>n9uJA</td>\n",
       "      <td>vvi9XV0f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>EDF</td>\n",
       "      <td>ACI</td>\n",
       "      <td>438</td>\n",
       "      <td>359</td>\n",
       "      <td>30/01/18 07:45:02</td>\n",
       "      <td>blz0Z</td>\n",
       "      <td>ticuCq4v</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>EDF</td>\n",
       "      <td>NJN</td>\n",
       "      <td>378</td>\n",
       "      <td>522</td>\n",
       "      <td>06/02/20 16:26:55</td>\n",
       "      <td>47YPh</td>\n",
       "      <td>8JaV13Jm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>EWR</td>\n",
       "      <td>CKY</td>\n",
       "      <td>441</td>\n",
       "      <td>482</td>\n",
       "      <td>31/12/19 03:19:06</td>\n",
       "      <td>Folg3</td>\n",
       "      <td>Eujk6gG7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>ALJ</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>444</td>\n",
       "      <td>469</td>\n",
       "      <td>10/10/18 18:40:58</td>\n",
       "      <td>rMC8W</td>\n",
       "      <td>z6hxERuL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>CKY</td>\n",
       "      <td>NYC</td>\n",
       "      <td>283</td>\n",
       "      <td>418</td>\n",
       "      <td>24/05/19 17:41:48</td>\n",
       "      <td>bP62U</td>\n",
       "      <td>VqC27KBh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>EDF</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>283</td>\n",
       "      <td>384</td>\n",
       "      <td>07/11/18 11:08:39</td>\n",
       "      <td>oHuOC</td>\n",
       "      <td>GBCaMxex</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>ALJ</td>\n",
       "      <td>EDF</td>\n",
       "      <td>329</td>\n",
       "      <td>500</td>\n",
       "      <td>30/01/18 11:48:53</td>\n",
       "      <td>DK91T</td>\n",
       "      <td>7ASfHHje</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49970</th>\n",
       "      <td>EDF</td>\n",
       "      <td>EWR</td>\n",
       "      <td>372</td>\n",
       "      <td>424</td>\n",
       "      <td>28/07/17 06:21:07</td>\n",
       "      <td>jvXpK</td>\n",
       "      <td>Sa1ANUC4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49971</th>\n",
       "      <td>ALJ</td>\n",
       "      <td>EDF</td>\n",
       "      <td>250</td>\n",
       "      <td>266</td>\n",
       "      <td>20/11/18 10:17:57</td>\n",
       "      <td>YR4ZH</td>\n",
       "      <td>VtszZa1w</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49972</th>\n",
       "      <td>NJN</td>\n",
       "      <td>NJN</td>\n",
       "      <td>455</td>\n",
       "      <td>429</td>\n",
       "      <td>13/01/20 02:02:53</td>\n",
       "      <td>NOdNP</td>\n",
       "      <td>Gl3FedGu</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49973</th>\n",
       "      <td>NJN</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>462</td>\n",
       "      <td>459</td>\n",
       "      <td>17/01/20 20:00:23</td>\n",
       "      <td>Klwkd</td>\n",
       "      <td>w8lyvFvj</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49974</th>\n",
       "      <td>NYC</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>203</td>\n",
       "      <td>293</td>\n",
       "      <td>28/09/17 07:10:36</td>\n",
       "      <td>I3j8j</td>\n",
       "      <td>Kmf7O6Ic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49975</th>\n",
       "      <td>ACI</td>\n",
       "      <td>EDF</td>\n",
       "      <td>497</td>\n",
       "      <td>378</td>\n",
       "      <td>24/07/17 03:03:03</td>\n",
       "      <td>LCWQU</td>\n",
       "      <td>zcg5NAwI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49976</th>\n",
       "      <td>EWR</td>\n",
       "      <td>CKY</td>\n",
       "      <td>250</td>\n",
       "      <td>333</td>\n",
       "      <td>23/01/20 17:36:24</td>\n",
       "      <td>KApJB</td>\n",
       "      <td>YhKjsE84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49977</th>\n",
       "      <td>ALJ</td>\n",
       "      <td>ACI</td>\n",
       "      <td>326</td>\n",
       "      <td>436</td>\n",
       "      <td>20/09/18 16:20:55</td>\n",
       "      <td>LDiU9</td>\n",
       "      <td>GFY1bAnQ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49978</th>\n",
       "      <td>CKY</td>\n",
       "      <td>NYC</td>\n",
       "      <td>266</td>\n",
       "      <td>437</td>\n",
       "      <td>28/06/18 05:10:44</td>\n",
       "      <td>qBIQR</td>\n",
       "      <td>zVECO54B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49979</th>\n",
       "      <td>NYC</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>357</td>\n",
       "      <td>273</td>\n",
       "      <td>01/10/18 10:29:00</td>\n",
       "      <td>8lNI5</td>\n",
       "      <td>sIWrdPlP</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49980</th>\n",
       "      <td>CKY</td>\n",
       "      <td>EWR</td>\n",
       "      <td>221</td>\n",
       "      <td>447</td>\n",
       "      <td>28/09/19 06:49:17</td>\n",
       "      <td>3NkRY</td>\n",
       "      <td>7SNBgL3M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49981</th>\n",
       "      <td>EWR</td>\n",
       "      <td>EWR</td>\n",
       "      <td>345</td>\n",
       "      <td>339</td>\n",
       "      <td>14/12/18 02:14:45</td>\n",
       "      <td>ZkcSu</td>\n",
       "      <td>ChxXjc4C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49982</th>\n",
       "      <td>NYC</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>269</td>\n",
       "      <td>311</td>\n",
       "      <td>29/11/19 00:47:43</td>\n",
       "      <td>kU01l</td>\n",
       "      <td>uchBinQ2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49983</th>\n",
       "      <td>EDF</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>362</td>\n",
       "      <td>400</td>\n",
       "      <td>24/11/19 01:46:12</td>\n",
       "      <td>otjkC</td>\n",
       "      <td>xUebFW9b</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49984</th>\n",
       "      <td>ESF</td>\n",
       "      <td>ACI</td>\n",
       "      <td>452</td>\n",
       "      <td>513</td>\n",
       "      <td>27/12/19 07:51:08</td>\n",
       "      <td>XrMRE</td>\n",
       "      <td>76US1MDi</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49985</th>\n",
       "      <td>EWR</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>364</td>\n",
       "      <td>469</td>\n",
       "      <td>14/06/18 18:58:49</td>\n",
       "      <td>U3Ukh</td>\n",
       "      <td>kIFNAQid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49986</th>\n",
       "      <td>EDF</td>\n",
       "      <td>NYC</td>\n",
       "      <td>380</td>\n",
       "      <td>251</td>\n",
       "      <td>12/12/17 02:15:20</td>\n",
       "      <td>oCPvs</td>\n",
       "      <td>h6LJOVEj</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49987</th>\n",
       "      <td>NYC</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>465</td>\n",
       "      <td>493</td>\n",
       "      <td>15/11/18 02:19:57</td>\n",
       "      <td>ejg2l</td>\n",
       "      <td>wF1VRBiy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49988</th>\n",
       "      <td>ALJ</td>\n",
       "      <td>CKY</td>\n",
       "      <td>352</td>\n",
       "      <td>426</td>\n",
       "      <td>23/01/18 12:58:15</td>\n",
       "      <td>gfwd0</td>\n",
       "      <td>4L5Bx6gp</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49989</th>\n",
       "      <td>NJN</td>\n",
       "      <td>CKY</td>\n",
       "      <td>340</td>\n",
       "      <td>471</td>\n",
       "      <td>27/06/17 17:19:57</td>\n",
       "      <td>Z4CHQ</td>\n",
       "      <td>MHJMpBFq</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49990</th>\n",
       "      <td>ALJ</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>328</td>\n",
       "      <td>475</td>\n",
       "      <td>19/02/20 04:47:45</td>\n",
       "      <td>CDGx0</td>\n",
       "      <td>lT0gK5p6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49991</th>\n",
       "      <td>NJN</td>\n",
       "      <td>NJN</td>\n",
       "      <td>363</td>\n",
       "      <td>308</td>\n",
       "      <td>10/12/19 22:52:51</td>\n",
       "      <td>mf9jH</td>\n",
       "      <td>rynthoQL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49992</th>\n",
       "      <td>NJN</td>\n",
       "      <td>EDF</td>\n",
       "      <td>209</td>\n",
       "      <td>338</td>\n",
       "      <td>27/09/19 16:45:49</td>\n",
       "      <td>Xzk42</td>\n",
       "      <td>5qV14hgo</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49993</th>\n",
       "      <td>EDF</td>\n",
       "      <td>CKY</td>\n",
       "      <td>255</td>\n",
       "      <td>356</td>\n",
       "      <td>09/11/18 14:30:47</td>\n",
       "      <td>Rg8zC</td>\n",
       "      <td>gdmR0TEu</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49994</th>\n",
       "      <td>NYC</td>\n",
       "      <td>EDF</td>\n",
       "      <td>273</td>\n",
       "      <td>401</td>\n",
       "      <td>26/01/20 14:13:45</td>\n",
       "      <td>5PZT9</td>\n",
       "      <td>uh80PoVt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49995</th>\n",
       "      <td>NYC</td>\n",
       "      <td>ALJ</td>\n",
       "      <td>264</td>\n",
       "      <td>479</td>\n",
       "      <td>30/12/18 13:29:44</td>\n",
       "      <td>q3Cym</td>\n",
       "      <td>pvL0tcZV</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49996</th>\n",
       "      <td>EDF</td>\n",
       "      <td>EDF</td>\n",
       "      <td>213</td>\n",
       "      <td>286</td>\n",
       "      <td>01/02/18 11:56:31</td>\n",
       "      <td>aF6hU</td>\n",
       "      <td>FuVonmbZ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49997</th>\n",
       "      <td>NYC</td>\n",
       "      <td>EDF</td>\n",
       "      <td>326</td>\n",
       "      <td>534</td>\n",
       "      <td>28/07/17 22:02:20</td>\n",
       "      <td>5II4A</td>\n",
       "      <td>hkKvHjRQ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49998</th>\n",
       "      <td>ESF</td>\n",
       "      <td>EDF</td>\n",
       "      <td>317</td>\n",
       "      <td>275</td>\n",
       "      <td>17/01/19 10:20:48</td>\n",
       "      <td>oUfZi</td>\n",
       "      <td>D1jxe7W6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49999</th>\n",
       "      <td>EDF</td>\n",
       "      <td>ESF</td>\n",
       "      <td>226</td>\n",
       "      <td>342</td>\n",
       "      <td>03/06/17 17:37:16</td>\n",
       "      <td>LhDL1</td>\n",
       "      <td>0ZsTneqQ</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50000 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         0    0    0    0                  0      0         0\n",
       "0      NYC  CKY  482  327  13/01/18 00:47:28  hbSHb  K1HPRGTQ\n",
       "1      CKY  ALJ  328  425  25/03/19 15:28:39  V5fLj  S2bv2jlY\n",
       "2      EDF  ACI  313  284  11/09/19 04:49:13  nvRcD  YSJEayBZ\n",
       "3      ALJ  NYC  302  401  21/09/17 02:06:57  6coA1  3mlyI5Bf\n",
       "4      NYC  NYC  404  438  30/10/18 12:49:07  ebcdr  FWj6gzGK\n",
       "5      NYC  ALJ  217  477  20/03/18 00:45:23  CeIwa  RlNLiO0a\n",
       "6      NYC  EDF  235  306  29/04/18 04:20:05  VIxuG  EpxoWHlm\n",
       "7      EDF  EWR  237  477  10/08/19 18:59:20  WpHDi  kFkNhxgf\n",
       "8      EWR  EWR  480  253  03/12/17 16:24:06  UnTAU  qNA9KmEf\n",
       "9      NJN  NYC  281  357  06/11/18 12:44:23  DIQW8  CmPNCtRL\n",
       "10     NYC  NYC  265  461  02/06/18 20:05:55  bsKc5  nFV9lYjv\n",
       "11     ALJ  ALJ  247  347  29/01/18 18:51:08  GY1se  pQM9vUnZ\n",
       "12     CKY  NYC  445  437  20/07/19 21:00:51  cFZOR  dEJcuPFc\n",
       "13     EDF  ESF  432  388  10/12/19 17:04:39  Ksr2k  9RxTAK4C\n",
       "14     ALJ  EDF  337  473  23/06/17 21:50:49  WinRG  kjEcW3aB\n",
       "15     CKY  CKY  262  354  24/07/18 00:13:51  1AGHL  XACXvu93\n",
       "16     CKY  ESF  312  532  23/11/19 11:43:28  G2UNk  ewcpywWs\n",
       "17     ESF  EWR  301  385  09/11/19 00:48:28  7X9vM  kxgL2N4h\n",
       "18     ALJ  NYC  244  381  22/08/19 21:50:14  hJTKJ  AV3fegNF\n",
       "19     ESF  CKY  337  418  06/02/20 02:15:47  XSMgP  rv6KoAQP\n",
       "20     ALJ  NJN  330  357  09/02/20 15:28:28  KNbvo  iXDQjvc1\n",
       "21     EWR  EWR  338  290  16/09/17 01:17:15  IQbcj  2ac9sXtj\n",
       "22     EDF  ACI  459  303  15/07/19 15:38:05  n9uJA  vvi9XV0f\n",
       "23     EDF  ACI  438  359  30/01/18 07:45:02  blz0Z  ticuCq4v\n",
       "24     EDF  NJN  378  522  06/02/20 16:26:55  47YPh  8JaV13Jm\n",
       "25     EWR  CKY  441  482  31/12/19 03:19:06  Folg3  Eujk6gG7\n",
       "26     ALJ  ALJ  444  469  10/10/18 18:40:58  rMC8W  z6hxERuL\n",
       "27     CKY  NYC  283  418  24/05/19 17:41:48  bP62U  VqC27KBh\n",
       "28     EDF  ALJ  283  384  07/11/18 11:08:39  oHuOC  GBCaMxex\n",
       "29     ALJ  EDF  329  500  30/01/18 11:48:53  DK91T  7ASfHHje\n",
       "...    ...  ...  ...  ...                ...    ...       ...\n",
       "49970  EDF  EWR  372  424  28/07/17 06:21:07  jvXpK  Sa1ANUC4\n",
       "49971  ALJ  EDF  250  266  20/11/18 10:17:57  YR4ZH  VtszZa1w\n",
       "49972  NJN  NJN  455  429  13/01/20 02:02:53  NOdNP  Gl3FedGu\n",
       "49973  NJN  ALJ  462  459  17/01/20 20:00:23  Klwkd  w8lyvFvj\n",
       "49974  NYC  ALJ  203  293  28/09/17 07:10:36  I3j8j  Kmf7O6Ic\n",
       "49975  ACI  EDF  497  378  24/07/17 03:03:03  LCWQU  zcg5NAwI\n",
       "49976  EWR  CKY  250  333  23/01/20 17:36:24  KApJB  YhKjsE84\n",
       "49977  ALJ  ACI  326  436  20/09/18 16:20:55  LDiU9  GFY1bAnQ\n",
       "49978  CKY  NYC  266  437  28/06/18 05:10:44  qBIQR  zVECO54B\n",
       "49979  NYC  ALJ  357  273  01/10/18 10:29:00  8lNI5  sIWrdPlP\n",
       "49980  CKY  EWR  221  447  28/09/19 06:49:17  3NkRY  7SNBgL3M\n",
       "49981  EWR  EWR  345  339  14/12/18 02:14:45  ZkcSu  ChxXjc4C\n",
       "49982  NYC  ALJ  269  311  29/11/19 00:47:43  kU01l  uchBinQ2\n",
       "49983  EDF  ALJ  362  400  24/11/19 01:46:12  otjkC  xUebFW9b\n",
       "49984  ESF  ACI  452  513  27/12/19 07:51:08  XrMRE  76US1MDi\n",
       "49985  EWR  ALJ  364  469  14/06/18 18:58:49  U3Ukh  kIFNAQid\n",
       "49986  EDF  NYC  380  251  12/12/17 02:15:20  oCPvs  h6LJOVEj\n",
       "49987  NYC  ALJ  465  493  15/11/18 02:19:57  ejg2l  wF1VRBiy\n",
       "49988  ALJ  CKY  352  426  23/01/18 12:58:15  gfwd0  4L5Bx6gp\n",
       "49989  NJN  CKY  340  471  27/06/17 17:19:57  Z4CHQ  MHJMpBFq\n",
       "49990  ALJ  ALJ  328  475  19/02/20 04:47:45  CDGx0  lT0gK5p6\n",
       "49991  NJN  NJN  363  308  10/12/19 22:52:51  mf9jH  rynthoQL\n",
       "49992  NJN  EDF  209  338  27/09/19 16:45:49  Xzk42  5qV14hgo\n",
       "49993  EDF  CKY  255  356  09/11/18 14:30:47  Rg8zC  gdmR0TEu\n",
       "49994  NYC  EDF  273  401  26/01/20 14:13:45  5PZT9  uh80PoVt\n",
       "49995  NYC  ALJ  264  479  30/12/18 13:29:44  q3Cym  pvL0tcZV\n",
       "49996  EDF  EDF  213  286  01/02/18 11:56:31  aF6hU  FuVonmbZ\n",
       "49997  NYC  EDF  326  534  28/07/17 22:02:20  5II4A  hkKvHjRQ\n",
       "49998  ESF  EDF  317  275  17/01/19 10:20:48  oUfZi  D1jxe7W6\n",
       "49999  EDF  ESF  226  342  03/06/17 17:37:16  LhDL1  0ZsTneqQ\n",
       "\n",
       "[50000 rows x 7 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bookingdata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "bookingdata.columns=['source','destination','bookingamount','Invoiceamount','bookingtime','profileid','transactionid']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Generate sample transactionid\n",
    "transactionid=pd.DataFrame(randomStringDigits(8) for _ in range(50000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              0\n",
      "0      o71rb7iP\n",
      "1      HhQbivdJ\n",
      "2      2BWOjpp7\n",
      "3      MunqjO0O\n",
      "4      XCjArtBy\n",
      "5      KEyia5B0\n",
      "6      0ad3EEsJ\n",
      "7      yNnPQwhV\n",
      "8      XTNDaGox\n",
      "9      dYB0p4PL\n",
      "10     s9tYCche\n",
      "11     DsEYr2KE\n",
      "12     VS7rT52x\n",
      "13     Guzn9SbV\n",
      "14     mQpXjy61\n",
      "15     qg7YT9Kx\n",
      "16     73NigSoG\n",
      "17     Zjz3yLGM\n",
      "18     ftLjZWOD\n",
      "19     QtNe6AfJ\n",
      "20     uwxltCsg\n",
      "21     IMeYigbo\n",
      "22     BujBEtdH\n",
      "23     tBzS2Rk3\n",
      "24     Q3RIgq0a\n",
      "25     KOoXzjYp\n",
      "26     xedEdpTW\n",
      "27     Uz4t4oAL\n",
      "28     luhbOISf\n",
      "29     V3Q0KAIL\n",
      "...         ...\n",
      "49970  JvqsNuTX\n",
      "49971  Qtk7R0Yb\n",
      "49972  ARNDXO2Z\n",
      "49973  JAsCXtdC\n",
      "49974  HyTARgRI\n",
      "49975  XB2gvpFL\n",
      "49976  0zPXDZey\n",
      "49977  iRJHIvJk\n",
      "49978  CIhPbDG2\n",
      "49979  M0xMxA0Y\n",
      "49980  Sw2AY7cM\n",
      "49981  CWaemvE8\n",
      "49982  R1ipkDN6\n",
      "49983  gwoF6Ckf\n",
      "49984  EynxHkZI\n",
      "49985  uuwMf7Wb\n",
      "49986  073sZY5d\n",
      "49987  KtOmHRVr\n",
      "49988  sklaUaG3\n",
      "49989  2L8r7AhG\n",
      "49990  lk4XVEPr\n",
      "49991  8aVtnWgi\n",
      "49992  ZcqFNMeD\n",
      "49993  uH8oL5CG\n",
      "49994  vs25UFZz\n",
      "49995  5JDzyLwR\n",
      "49996  cBZspqrM\n",
      "49997  ZnL8XHLz\n",
      "49998  TfLyeynt\n",
      "49999  ZRJCOSD4\n",
      "\n",
      "[50000 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "print(transactionid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Generate sample data for frequent flier and put it fflier dataframe\n",
    "Balance=pd.DataFrame(np.random.randint(200,500,size=50000))\n",
    "Bonusmiles=pd.DataFrame(np.random.randint(200,300,size=50000))    \n",
    "QualMiles=pd.DataFrame(np.random.randint(200,300,size=50000))    \n",
    "BonusTrans=pd.DataFrame(np.random.randint(250,550,size=50000)) \n",
    "FlightMiles=pd.DataFrame(np.random.randint(250,550,size=50000))      \n",
    "QualMiles=pd.DataFrame(np.random.randint(1000,2000,size=50000))     \n",
    "DaysSinceEnroll=pd.DataFrame(np.random.randint(1000,2000,size=50000))     \n",
    "fflier=pd.concat([Balance,BonusTrans,QualMiles,Bonusmiles,FlightMiles,QualMiles,DaysSinceEnroll,profileid],axis=1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Balance = number of miles eligible for award travel QualMiles = number of miles qualifying for TopFlight status BonusMiles = number of miles earned from non-flight bonus transactions in the past 12 months BonusTrans = number of non-flight bonus transactions in the past 12 months FlightMiles = number of flight miles in the past 12 months FlightTrans = number of flight transactions in the past 12 months DaysSinceEnroll = number of days since enrolled in the frequent flyer program"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "demodata.columns=(['geog','age','gender','profileid'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "fflier.columns=['Balance','Bonusmiles','BonusTrans','QualMiles','FlightMiles','QualMiles','DaysSinceEnroll','profileid']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "now = (datetime.datetime.now())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "bookingdata['dayssincelasttransaction']=now-pd.to_datetime(bookingdata.bookingtime)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "bookingdata['dayssincelasttransaction']=bookingdata['dayssincelasttransaction'].dt.days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "bookingdata['target']=np.where(bookingdata['dayssincelasttransaction']>365,1,0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    49099\n",
       "0      901\n",
       "Name: target, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bookingdata.target.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['source', 'destination', 'bookingamount', 'Invoiceamount',\n",
       "       'bookingtime', 'profileid', 'transactionid', 'dayssincelasttransaction',\n",
       "       'target'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bookingdata.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['geog', 'age', 'gender', 'profileid'], dtype='object')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "demodata.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "profileid=pd.DataFrame(randomStringDigits(5) for _ in range(50000))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "bookingdata['profileid']=profileid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "#merging bookings data ,fflier data, and profile data\n",
    "mergeddata=pd.merge(bookingdata,demodata,on=\"profileid\")\n",
    "mergeddata=pd.merge(mergeddata,fflier,on=\"profileid\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>source</th>\n",
       "      <th>destination</th>\n",
       "      <th>bookingamount</th>\n",
       "      <th>Invoiceamount</th>\n",
       "      <th>bookingtime</th>\n",
       "      <th>profileid</th>\n",
       "      <th>transactionid</th>\n",
       "      <th>dayssincelasttransaction</th>\n",
       "      <th>target</th>\n",
       "      <th>geog</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>Balance</th>\n",
       "      <th>Bonusmiles</th>\n",
       "      <th>BonusTrans</th>\n",
       "      <th>QualMiles</th>\n",
       "      <th>FlightMiles</th>\n",
       "      <th>QualMiles</th>\n",
       "      <th>DaysSinceEnroll</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>EDF</td>\n",
       "      <td>ESF</td>\n",
       "      <td>471</td>\n",
       "      <td>288</td>\n",
       "      <td>08/12/17 23:35:41</td>\n",
       "      <td>ZnuXu</td>\n",
       "      <td>Ao1a4doe</td>\n",
       "      <td>1302</td>\n",
       "      <td>1</td>\n",
       "      <td>State1</td>\n",
       "      <td>35</td>\n",
       "      <td>Female</td>\n",
       "      <td>440</td>\n",
       "      <td>345</td>\n",
       "      <td>1137</td>\n",
       "      <td>203</td>\n",
       "      <td>335</td>\n",
       "      <td>1137</td>\n",
       "      <td>1103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NJN</td>\n",
       "      <td>ESF</td>\n",
       "      <td>274</td>\n",
       "      <td>460</td>\n",
       "      <td>20/02/19 16:48:26</td>\n",
       "      <td>hZX5a</td>\n",
       "      <td>v53543SN</td>\n",
       "      <td>746</td>\n",
       "      <td>1</td>\n",
       "      <td>State1</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "      <td>349</td>\n",
       "      <td>294</td>\n",
       "      <td>1424</td>\n",
       "      <td>253</td>\n",
       "      <td>351</td>\n",
       "      <td>1424</td>\n",
       "      <td>1604</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  source destination  bookingamount  Invoiceamount        bookingtime  \\\n",
       "0    EDF         ESF            471            288  08/12/17 23:35:41   \n",
       "1    NJN         ESF            274            460  20/02/19 16:48:26   \n",
       "\n",
       "  profileid transactionid  dayssincelasttransaction  target    geog  age  \\\n",
       "0     ZnuXu      Ao1a4doe                      1302       1  State1   35   \n",
       "1     hZX5a      v53543SN                       746       1  State1   34   \n",
       "\n",
       "   gender  Balance  Bonusmiles  BonusTrans  QualMiles  FlightMiles  QualMiles  \\\n",
       "0  Female      440         345        1137        203          335       1137   \n",
       "1  Female      349         294        1424        253          351       1424   \n",
       "\n",
       "   DaysSinceEnroll  \n",
       "0             1103  \n",
       "1             1604  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mergeddata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['source', 'destination', 'bookingamount', 'Invoiceamount',\n",
       "       'bookingtime', 'profileid', 'transactionid', 'dayssincelasttransaction',\n",
       "       'target', 'geog', 'age', 'gender', 'Balance', 'Bonusmiles',\n",
       "       'BonusTrans', 'QualMiles', 'FlightMiles', 'QualMiles',\n",
       "       'DaysSinceEnroll'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mergeddata.columns\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "mergeddata.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9cd9256610>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#EDA\n",
    "#Exploratory Data Analysis to understand the overall picture of Churn\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "gender_plot = mergeddata.groupby(['target', 'gender']).size().reset_index().pivot(columns='gender', index='target',values=0) \n",
    "geo_plot = mergeddata.groupby(['target', 'geog']).size().reset_index().pivot(columns='geog', index='target',values=0) \n",
    "#sales_plot = mergeddata.groupby(['target','geog']).size().reset_index().pivot(columns='bookingamount', index='target', values=0) \n",
    "fig, axarr = plt.subplots(2, 3, figsize=(20,20))\n",
    "sns.boxplot(x=mergeddata.target,y=mergeddata.bookingamount,ax=axarr[0][0])\n",
    "sns.boxplot(x=mergeddata.target,y=mergeddata.bookingamount,ax=axarr[0][0])\n",
    "geo_plot.plot(kind='bar',stacked=\"True\",ax=axarr[0][1])\n",
    "gender_plot.plot(kind='bar', stacked=\"True\",ax=axarr[0][2])\n",
    "sns.boxplot(x=mergeddata.target,y=mergeddata.age,ax=axarr[1][0])\n",
    "sns.boxplot(x=mergeddata.target,y=mergeddata.gender,ax=axarr[1][1])\n",
    "sns.boxplot(x=mergeddata.target,y=mergeddata.Balance,ax=axarr[1][2])\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9cd8154a10>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=mergeddata.target,y=mergeddata.Invoiceamount)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    345\n",
       "1    294\n",
       "Name: Bonusmiles, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mergeddata['Bonusmiles']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "counts=mergeddata.gender.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Female    2\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9cd79d5ad0>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axarr = plt.subplots(2, 3, figsize=(20,20))\n",
    "sns.boxplot(x=mergeddata.target,y=mergeddata.Invoiceamount,ax=axarr[0][1])\n",
    "sns.boxplot(x=mergeddata.target,y=mergeddata.age,ax=axarr[0][0])\n",
    "sns.boxplot(x=mergeddata.target,y=mergeddata.gender,ax=axarr[0][2])\n",
    "sns.boxplot(x=mergeddata.target,y=mergeddata.Balance,ax=axarr[1][0])\n",
    "sns.boxplot(x=mergeddata.target,y=mergeddata.Bonusmiles,ax=axarr[1][1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mergeddata.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install imblearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function to plot ROC curves for the different machine learning algorithms we will attempt\n",
    "def plotroc(fpr,tpr):\n",
    "    import matplotlib.pyplot as plt\n",
    "    from sklearn.metrics import classification_report\n",
    "    from sklearn.metrics import roc_auc_score\n",
    "    from sklearn.metrics import roc_curve\n",
    "    from sklearn import metrics\n",
    "    plt.figure(figsize=(10,10))\n",
    "    plt.title('Receiver Operating Characteristic')\n",
    "    plt.plot(fpr,tpr, color='red',label = 'AUC = %0.2f')# roc_auc)\n",
    "    plt.legend(loc = 'lower right')\n",
    "    plt.plot([0, 1], [0, 1],linestyle='--')\n",
    "    plt.axis('tight')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.xlabel('False Positive Rate')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We will define a function to build machine learning algorithms to generate churn probabilites.\n",
    "def buildmodel(dataframe):\n",
    "    modeldict={}\n",
    "    productdata=dataframe\n",
    "    productdata\n",
    "    numericfeatures=productdata[['Bookingamount','Invoiceamount','dayssincelasttransaction','BonusTrans', 'QualMiles', 'Bonusmiles', 'FlightMiles','age','DaysSinceEnroll'] ]\n",
    "    catfeatures=productdata[['geog','gender']]\n",
    "    model_target=productdata[\"target\"].values\n",
    "    catfeatures=pd.get_dummies(catfeatures)\n",
    "    modeldata=pd.concat([numericfeatures,catfeatures],axis=1)\n",
    "    from sklearn.preprocessing import MinMaxScaler\n",
    "    from imblearn.over_sampling import SMOTE\n",
    "    scaler = MinMaxScaler()\n",
    "    scaler.fit(modeldata)\n",
    "    features=scaler.transform(modeldata)\n",
    "    import numpy as np\n",
    "    from sklearn.model_selection import train_test_split\n",
    "    X_train, X_test, y_train, y_test = train_test_split(features,model_target)\n",
    "\n",
    "    from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "    from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "    # Setup the hyperparameter grid\n",
    "\n",
    "    c_space = np.logspace(-5, 8, 15)\n",
    "    #c_space = [0.01,0.1,0.05]\n",
    "    param_grid = {'C': [0.1,10,50], 'max_iter': [300,500],'solver':['lbfgs'],'class_weight':['balanced'],'fit_intercept':[True],'intercept_scaling':[1],'penalty':['l2'],}\n",
    "    # Instantiate a logistic regression classifier: logreg\n",
    "\n",
    "    logreg = LogisticRegression()\n",
    "    sm = SMOTE(random_state=2)\n",
    "    X_train_res, y_train_res = sm.fit_sample(X_train, y_train)\n",
    "\n",
    "    # Instantiate the GridSearchCV object: logreg_cv\n",
    "\n",
    "    logreg_cv = GridSearchCV(logreg,param_grid,cv=5)\n",
    "\n",
    "    logfit=logreg_cv.fit(X_train_res,y_train_res)\n",
    "\n",
    "    # Print the tuned parameter and score\n",
    "\n",
    "    #print(\"Tuned Logistic Regression Parameters: {}\".format(logreg_cv.best_params_))\n",
    "\n",
    "    #print(\"Best score is {}\".format(logreg_cv.best_score_))\n",
    "\n",
    "    #Scoring functions\n",
    "    from sklearn import metrics\n",
    "    from sklearn.metrics import accuracy_score\n",
    "    from sklearn.metrics import classification_report\n",
    "    from sklearn.metrics import roc_auc_score\n",
    "    from sklearn.metrics import roc_curve\n",
    "    from sklearn.ensemble import RandomForestClassifier\n",
    "    from sklearn.neighbors import KNeighborsClassifier\n",
    "    pred=logreg_cv.predict(X_test)\n",
    "    logpredictprob_test=logreg_cv.predict_proba(X_test)\n",
    "    Aucscore=roc_auc_score(y_test,pred)\n",
    "    accuracy=logfit.score(X_test,y_test)\n",
    "    modeldict['LogisticregressionAucscore_test']=Aucscore\n",
    "    fpr,tpr, thresholds = roc_curve(y_test,pred)\n",
    "    plotroc(fpr,tpr)\n",
    "    print(pd.crosstab(y_test,pred))\n",
    "    modeldict['Logisticregressionbestparameters']=logreg_cv.best_params_\n",
    "    param_grid = {'max_depth': [3, 5, 6, 7, 8], 'n_estimators':[10,20],'class_weight':['balanced'],'min_samples_split': [3, 5, 6, 7]}\n",
    "    rand_grid = GridSearchCV(RandomForestClassifier(), param_grid, cv=5, refit=True, verbose=0)\n",
    "    #rf.feature_importances_=rand_grid.feature_importances_ \n",
    "    sm = SMOTE(random_state=2)\n",
    "    X_train_res, y_train_res = sm.fit_sample(X_train, y_train)\n",
    "    rand_grid.fit(X_train_res,y_train_res)  \n",
    "    \n",
    "    randpredict=rand_grid.predict(X_test)\n",
    "    randpredict_prob_test=rand_grid.predict_proba(X_test)\n",
    "    modeldict['Randombestparams']=rand_grid.best_params_\n",
    "    randomforestaucscore=roc_auc_score(y_test,randpredict)\n",
    "    modeldict['Randomforestaucscore_test']=randomforestaucscore\n",
    "    from sklearn.metrics import roc_curve, auc\n",
    "    fpr,tpr, thresholds = roc_curve(y_test, randpredict)\n",
    "    plotroc(fpr,tpr)\n",
    "    print(pd.crosstab(y_test, randpredict))\n",
    "    param_grid = {'n_neighbors': [3,5,7,9]}\n",
    "    nb_grid = GridSearchCV(KNeighborsClassifier(), param_grid, cv=5)\n",
    "    sm = SMOTE(random_state=2)\n",
    "    #X_train_res, y_train_res = sm.fit_sample(X_train_res, y_train_res)\n",
    "    nb_grid.fit(X_train_res,y_train_res)\n",
    "    nbpredict=nb_grid.predict(X_test)\n",
    "    modeldict['nbscore_test']=roc_auc_score(y_test,nbpredict)\n",
    "    fpr,tpr, thresholds = roc_curve(y_test, nbpredict)\n",
    "    plotroc(fpr,tpr)\n",
    "    print(pd.crosstab(y_test, nbpredict))\n",
    "    modeldict['nbparams']=nb_grid.best_params_\n",
    "    #print(modeldict)\n",
    "    #finalmodeldata=pd.concat([productdata,pd.DataFrame(randpredict)],axis=1)\n",
    "    return(modeldict,pred,randpredict,nbpredict,randpredict_prob_test, logpredictprob_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"['Bookingamount'] not in index\"",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-38-62116e11ab27>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mbuildmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmergeddata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-37-cb69358773dd>\u001b[0m in \u001b[0;36mbuildmodel\u001b[0;34m(dataframe)\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mproductdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdataframe\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mproductdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mnumericfeatures\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproductdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Bookingamount'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'Invoiceamount'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'dayssincelasttransaction'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'BonusTrans'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'QualMiles'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Bonusmiles'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'FlightMiles'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'age'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'DaysSinceEnroll'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mcatfeatures\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproductdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'geog'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'gender'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mmodel_target\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mproductdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"target\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2932\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2933\u001b[0m             indexer = self.loc._convert_to_indexer(key, axis=1,\n\u001b[0;32m-> 2934\u001b[0;31m                                                    raise_missing=True)\n\u001b[0m\u001b[1;32m   2935\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2936\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_convert_to_indexer\u001b[0;34m(self, obj, axis, is_setter, raise_missing)\u001b[0m\n\u001b[1;32m   1352\u001b[0m                 kwargs = {'raise_missing': True if is_setter else\n\u001b[1;32m   1353\u001b[0m                           raise_missing}\n\u001b[0;32m-> 1354\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1355\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1356\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1159\u001b[0m         self._validate_read_indexer(keyarr, indexer,\n\u001b[1;32m   1160\u001b[0m                                     \u001b[0mo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_number\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1161\u001b[0;31m                                     raise_missing=raise_missing)\n\u001b[0m\u001b[1;32m   1162\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.7/site-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1250\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'loc'\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1251\u001b[0m                 \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1252\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"{} not in index\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnot_found\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1253\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1254\u001b[0m             \u001b[0;31m# we skip the warning on Categorical/Interval\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: \"['Bookingamount'] not in index\""
     ]
    }
   ],
   "source": [
    "buildmodel(mergeddata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install imblearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Final model building from selected parameters\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf=RandomForestClassifier(class_weight='balanced',max_depth=3,min_samples_split=3,n_estimators=10)\n",
    "numericfeatures=mergeddata[['Bookingamount','Invoiceamount','dayssincelasttransaction','BonusTrans', 'QualMiles', 'Bonusmiles', 'FlightMiles','age','DaysSinceEnroll'] ]\n",
    "catfeatures=mergeddata[['geog','gender']]\n",
    "model_target=mergeddata[\"target\"].values\n",
    "catfeatures=pd.get_dummies(catfeatures)\n",
    "modeldata=pd.concat([numericfeatures,catfeatures],axis=1)\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from imblearn.over_sampling import SMOTE\n",
    "scaler = MinMaxScaler()\n",
    "scaler=scaler.fit(modeldata)\n",
    "features=scaler.transform(modeldata)\n",
    "rf.fit(features,model_target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Generate final predictions\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import roc_curve\n",
    "predictfinal=rf.predict(features)\n",
    "fpr,tpr, thresholds = roc_curve(model_target,predictfinal)\n",
    "plotroc(fpr,tpr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "importances=rf.feature_importances_\n",
    "    #Plot the feature importances in predicting the target variables\n",
    "importances\n",
    "max_imp=np.max(importances)\n",
    "min_imp=np.min(importances)\n",
    "indices = np.argsort(importances)[::-1]\n",
    "plt.figure()\n",
    "plt.title(\"Feature importances\")\n",
    "plt.bar(range(0,10),importances[:10],color=\"r\", align=\"center\")\n",
    "plt.xticks(range(0,10), modeldata.columns[indices[:10]], rotation=45, ha='right')\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
